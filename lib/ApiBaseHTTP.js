// Generated by CoffeeScript 1.10.0
(function() {
    var ApiBase, debug, querystring, rest,
        bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
        extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    debug = require('debug')('gitlab:ApiBaseHTTP');

    ApiBase = require('./ApiBase').ApiBase;

    querystring = require('querystring');

    rest = require('rest-js');

    module.exports.ApiBaseHTTP = (function(superClass) {
        extend(ApiBaseHTTP, superClass);

        function ApiBaseHTTP() {
            this.patch = bind(this.patch, this);
            this.put = bind(this.put, this);
            this.post = bind(this.post, this);
            this["delete"] = bind(this["delete"], this);
            this.get = bind(this.get, this);
            this.authPath = bind(this.authPath, this);
            this.fn_wrapper = bind(this.fn_wrapper, this);
            this.prepare_opts = bind(this.prepare_opts, this);
            this.init = bind(this.init, this);
            this.handleOptions = bind(this.handleOptions, this);
            return ApiBaseHTTP.__super__.constructor.apply(this, arguments);
        }

        ApiBaseHTTP.prototype.handleOptions = function() {
            var base, base1, base2, base3;
            ApiBaseHTTP.__super__.handleOptions.apply(this, arguments);
            if ((base = this.options).base_url == null) {
                base.base_url = '';
            }
            if (!this.options.url) {
                throw "`url` is mandatory";
            }
            if (!this.options.token && !this.options.access_token) {
                throw "`private_token or access_token` is mandatory";
            }
            (base1 = this.options).restOption || (base1.restOption = {
                defaultFormat: '',
                crossDomain: true
            });
            if ((base2 = this.options).slumber == null) {
                base2.slumber = {};
            }
            if ((base3 = this.options.slumber).append_slash == null) {
                base3.append_slash = false;
            }
            if (this.options.auth != null) {
                this.options.slumber.auth = this.options.auth;
            }
            return debug("handleOptions()");
        };

        ApiBaseHTTP.prototype.init = function() {
            ApiBaseHTTP.__super__.init.apply(this, arguments);
            return this.slumber = rest(this.options.url + "/" + this.options.base_url + "/", this.options.restOption);
        };

        ApiBaseHTTP.prototype.prepare_opts = function(opts) {
            if (opts.__query == null) {
                opts.__query = {};
            }
            if (this.options.token) {
                opts.__query.private_token = this.options.token;
            }
            if (this.options.access_token) {
                opts.__query.access_token = this.options.access_token;
            }
            return opts;
        };

        ApiBaseHTTP.prototype.fn_wrapper = function(fn) {
            return (function(_this) {
                return function(err, ret) {
                    var arity;
                    if (err) {
                        debug('an error has occured', err);
                    }
                    arity = fn.length;
                    switch (arity) {
                        case 1:
                            return fn(ret);
                        case 2:
                            return fn(err, ret);
                    }
                };
            })(this);
        };

        ApiBaseHTTP.prototype.authPath = function(path, query) {
            var opts;
            opts = this.prepare_opts(query);
            if (opts.__query.private_token) {
                path += "?private_token=" + opts.__query.private_token;
            }
            if (opts.__query.access_token) {
                path += "?access_token=" + opts.__query.access_token;
            }
            return path;
        };

        ApiBaseHTTP.prototype.get = function(path, query, fn) {
            var opts;
            if (query == null) {
                query = {};
            }
            if (fn == null) {
                fn = null;
            }
            if ('function' === typeof query) {
                fn = query;
                query = {};
            }
            opts = this.prepare_opts(query);
            path = this.authPath(path, query);
            return this.slumber.read(path, opts, this.fn_wrapper(fn));
        };

        ApiBaseHTTP.prototype["delete"] = function(path, fn) {
            var opts;
            if (fn == null) {
                fn = null;
            }
            opts = this.prepare_opts({});
            path = this.authPath(path, {});
            return this.slumber.remove(path, opts, this.fn_wrapper(fn));
        };

        ApiBaseHTTP.prototype.post = function(path, data, fn) {
            var opts;
            if (data == null) {
                data = {};
            }
            if (fn == null) {
                fn = null;
            }
            opts = this.prepare_opts(data);
            path = this.authPath(path, data);
            return this.slumber.create(path, opts, this.fn_wrapper(fn));
        };

        ApiBaseHTTP.prototype.put = function(path, data, fn) {
            var opts;
            if (data == null) {
                data = {};
            }
            if (fn == null) {
                fn = null;
            }
            opts = this.prepare_opts(data);
            path = this.authPath(path, data);
            return this.slumber.update(path, opts, this.fn_wrapper(fn));
        };

        ApiBaseHTTP.prototype.patch = function(path, data, fn) {
            var opts;
            if (data == null) {
                data = {};
            }
            if (fn == null) {
                fn = null;
            }
            opts = this.prepare_opts(data);
            path = this.authPath(path, data);
            return this.slumber.update(path, opts, this.fn_wrapper(fn));
        };

        return ApiBaseHTTP;

    })(ApiBase);

}).call(this);

//# sourceMappingURL=ApiBaseHTTP.js.map
